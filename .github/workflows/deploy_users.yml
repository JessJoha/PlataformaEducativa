name: Deploy Users Microservices

on:
  push:
    branches:
      - test  

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME_J }}
          password: ${{ secrets.DOCKERHUB_PASSWORD_J }}

      - name: Build and push images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME_J }}/create-user:v2 ./backend/UserManagement/createUser
          docker build -t ${{ secrets.DOCKERHUB_USERNAME_J }}/delete-user:v2 ./backend/UserManagement/deleteUser
          docker build -t ${{ secrets.DOCKERHUB_USERNAME_J }}/list-user:v2 ./backend/UserManagement/listUser
          docker build -t ${{ secrets.DOCKERHUB_USERNAME_J }}/update-user:v2 ./backend/UserManagement/updateUser
          
          docker push ${{ secrets.DOCKERHUB_USERNAME_J }}/create-user:v2
          docker push ${{ secrets.DOCKERHUB_USERNAME_J }}/delete-user:v2
          docker push ${{ secrets.DOCKERHUB_USERNAME_J }}/list-user:v2
          docker push ${{ secrets.DOCKERHUB_USERNAME_J }}/update-user:v2

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Users Microservices to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS_USERS }}
          username: ubuntu  
          key: ${{ secrets.EC2_SSH_KEY_USERS }}
          script: |
            # Instalar Docker si no está presente
            if ! command -v docker &> /dev/null
            then
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ubuntu
            fi

            # Detener y eliminar contenedores antiguos
            sudo docker stop create-user delete-user list-user update-user || true
            sudo docker rm create-user delete-user list-user update-user || true

            # Descargar nuevas imágenes
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME_J }}/create-user:v2
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME_J }}/delete-user:v2
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME_J }}/list-user:v2
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME_J }}/update-user:v2

            # Ejecutar los contenedores con los puertos correspondientes
            sudo docker run -d --name create-user -p 3000:3000 \
              -e DB_URL="${{ secrets.DB_URL_MYSQL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME_J }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_MYSQL }}" \
              ${{ secrets.DOCKERHUB_USERNAME_J }}/create-user:v2

            sudo docker run -d --name delete-user -p 3001:3001 \
              -e DB_URL="${{ secrets.DB_URL_MYSQL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME_J }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_MYSQL }}" \
              ${{ secrets.DOCKERHUB_USERNAME_J }}/delete-user:v2

            sudo docker run -d --name list-user -p 3003:3003 \
              -e DB_URL="${{ secrets.DB_URL_MYSQL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME_J }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_MYSQL }}" \
              ${{ secrets.DOCKERHUB_USERNAME_J }}/list-user:v2

            sudo docker run -d --name update-user -p 3004:3004 \
              -e DB_URL="${{ secrets.DB_URL_MYSQL }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME_J }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_MYSQL }}" \
              ${{ secrets.DOCKERHUB_USERNAME_J }}/update-user:v2
